/**
 * üîç DIAGN√ìSTICO ESPEC√çFICO: Problema de Fetch en Producci√≥n
 * Identifica por qu√© los banners/promociones/favoritos no aparecen en el cliente
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function diagnoseFetchProduction() {
  console.log('üîç DIAGN√ìSTICO: PROBLEMA DE FETCH EN PRODUCCI√ìN');
  console.log('='.repeat(55));
  
  try {
    const businessId = 'cmgf5px5f0000eyy0elci9yds';
    
    // 1. VERIFICAR DATOS EN BD (que sabemos que existen)
    console.log('\nüìä 1. DATOS EN BASE DE DATOS');
    console.log('-'.repeat(35));
    
    const banners = await prisma.portalBanner.findMany({
      where: { businessId, active: true }
    });
    
    const promociones = await prisma.portalPromocion.findMany({
      where: { businessId, active: true }
    });
    
    const favoritos = await prisma.portalFavoritoDelDia.findMany({
      where: { businessId, active: true }
    });
    
    console.log(`‚úÖ Banners activos en BD: ${banners.length}`);
    console.log(`‚úÖ Promociones activas en BD: ${promociones.length}`);
    console.log(`‚úÖ Favoritos activos en BD: ${favoritos.length}`);
    
    // 2. SIMULAR LLAMADA API SIN HEADER (como en producci√≥n)
    console.log('\nüåê 2. SIMULANDO LLAMADA API SIN x-business-id HEADER');
    console.log('-'.repeat(60));
    
    try {
      const fetch = require('node-fetch');
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3001';
      const apiUrl = `${baseUrl}/api/portal/config-v2?businessId=${businessId}`;
      
      console.log(`üìû Llamando: ${apiUrl}`);
      
      const response = await fetch(apiUrl, {
        headers: {
          'Content-Type': 'application/json'
          // üö® SIN x-business-id header - como est√° pasando en producci√≥n
        }
      });
      
      const data = await response.json();
      
      console.log(`üìã Status: ${response.status}`);
      console.log(`üìã Success: ${data.success}`);
      
      if (data.success && data.data) {
        console.log(`üì¢ Banners en respuesta: ${data.data.banners?.length || 0}`);
        console.log(`üéÅ Promociones en respuesta: ${data.data.promociones?.length || 0}`);
        console.log(`‚≠ê Favorito en respuesta: ${data.data.favoritoDelDia ? 'S√≠' : 'No'}`);
        
        if (data.data.banners?.length > 0) {
          console.log('   üì¢ Banners encontrados:');
          data.data.banners.forEach((banner, idx) => {
            console.log(`      ${idx + 1}. "${banner.titulo}" (d√≠a: ${banner.dia})`);
          });
        }
        
        if (data.data.promociones?.length > 0) {
          console.log('   üéÅ Promociones encontradas:');
          data.data.promociones.forEach((promo, idx) => {
            console.log(`      ${idx + 1}. "${promo.titulo}" (d√≠a: ${promo.dia})`);
          });
        }
        
        if (data.data.favoritoDelDia) {
          console.log(`   ‚≠ê Favorito: "${data.data.favoritoDelDia.productName}"`);
        }
      } else {
        console.log(`‚ùå Error en API: ${data.error || 'Sin datos'}`);
      }
      
    } catch (fetchError) {
      console.log(`‚ùå Error en fetch: ${fetchError.message}`);
    }
    
    // 3. VERIFICAR SI EL PROBLEMA ES EL MIDDLEWARE
    console.log('\nüîß 3. AN√ÅLISIS DEL PROBLEMA DE MIDDLEWARE');
    console.log('-'.repeat(50));
    
    console.log('üîç El problema identificado:');
    console.log('   1. ‚ùå Middleware actual (emergency) NO configura x-business-id header');
    console.log('   2. ‚ùå API config-v2 depende de getBusinessIdFromRequest()');
    console.log('   3. ‚ùå getBusinessIdFromRequest() busca x-business-id header');
    console.log('   4. ‚ùå Sin header, businessId = null ‚Üí usa "default"');
    console.log('   5. ‚ùå "default" no tiene datos ‚Üí respuesta vac√≠a');
    
    // 4. SOLUCIONES PROPUESTAS
    console.log('\nüí° 4. SOLUCIONES PARA PRODUCCI√ìN');
    console.log('-'.repeat(40));
    
    console.log('üîß SOLUCI√ìN 1: Arreglar middleware (RECOMENDADO)');
    console.log('   - Restaurar middleware.complex.ts que S√ç configura headers');
    console.log('   - O modificar middleware.ts actual para a√±adir headers');
    
    console.log('\nüîß SOLUCI√ìN 2: Arreglar API (R√ÅPIDO)');
    console.log('   - Modificar config-v2 para usar query param como fallback');
    console.log('   - Sin cambios en middleware');
    
    console.log('\nüîß SOLUCI√ìN 3: Arreglar cliente (TEMPORAL)');
    console.log('   - Cliente incluye businessId en todas las llamadas');
    console.log('   - Headers adicionales si es necesario');
    
    // 5. COMANDO DE VERIFICACI√ìN
    console.log('\nüß™ 5. VERIFICACI√ìN EN NAVEGADOR');
    console.log('-'.repeat(40));
    
    console.log('Ejecuta esto en la consola del navegador en producci√≥n:');
    console.log('```javascript');
    console.log('// Verificar si la API responde correctamente');
    console.log(`fetch('/api/portal/config-v2?businessId=${businessId}')`);
    console.log('  .then(r => r.json())');
    console.log('  .then(data => {');
    console.log('    console.log("üîç RESULTADO DEL FETCH:");');
    console.log('    console.log("Success:", data.success);');
    console.log('    console.log("Banners:", data.data?.banners?.length || 0);');
    console.log('    console.log("Promociones:", data.data?.promociones?.length || 0);');
    console.log('    console.log("Favorito:", data.data?.favoritoDelDia ? "S√≠" : "No");');
    console.log('    console.log("BusinessId usado:", data.data?.businessId);');
    console.log('    if (data.data?.banners?.length === 0) {');
    console.log('      console.log("‚ùå PROBLEMA: Sin banners - revisar businessId");');
    console.log('    }');
    console.log('  })');
    console.log('  .catch(err => console.error("‚ùå Error:", err));');
    console.log('```');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  } finally {
    await prisma.$disconnect();
  }
}

diagnoseFetchProduction().catch(console.error);
