// üß™ VERIFICACI√ìN FINAL: Sistema de Tarjetas Corregido
// Este script verifica que la configuraci√≥n de tarjetas est√© funcionando correctamente

console.log('üß™ VERIFICACI√ìN FINAL - SISTEMA DE TARJETAS');
console.log('===========================================');

const fs = require('fs');

const businessId = 'cmfuou55e0022ey7c3idlhx9h';
const configPath = `C:\\Users\\abrah\\lealta\\config\\portal\\portal-config-${businessId}.json`;

try {
  console.log(`üìÅ Verificando: ${configPath}`);
  
  const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
  const tarjetas = configData.tarjetas;
  
  console.log('\nüìä AN√ÅLISIS DE CONFIGURACI√ìN:');
  console.log('============================');
  
  if (!tarjetas || tarjetas.length === 0) {
    console.log('‚ùå ERROR: No hay tarjetas configuradas');
    return;
  }
  
  const tarjeta = tarjetas[0];
  const niveles = tarjeta.niveles;
  
  console.log(`‚úÖ Tarjetas encontradas: ${tarjetas.length}`);
  console.log(`‚úÖ Nombre: ${tarjeta.nombre}`);
  console.log(`‚úÖ Niveles encontrados: ${niveles.length}`);
  
  // Verificar niveles requeridos
  const nivelesRequeridos = ['Bronce', 'Plata', 'Oro', 'Diamante', 'Platino'];
  const nivelesFaltantes = [];
  const nivelesEncontrados = [];
  
  console.log('\nüéØ VERIFICACI√ìN DE NIVELES:');
  console.log('===========================');
  
  nivelesRequeridos.forEach(nivelRequerido => {
    const encontrado = niveles.find(n => n.nombre === nivelRequerido);
    if (encontrado) {
      nivelesEncontrados.push(nivelRequerido);
      console.log(`‚úÖ ${nivelRequerido}: ${encontrado.puntosRequeridos} pts, ${encontrado.visitasRequeridas} visitas, ${encontrado.descuento}% desc`);
    } else {
      nivelesFaltantes.push(nivelRequerido);
      console.log(`‚ùå ${nivelRequerido}: FALTANTE`);
    }
  });
  
  // Verificar progresi√≥n l√≥gica
  console.log('\nüìà VERIFICACI√ìN DE PROGRESI√ìN:');
  console.log('==============================');
  
  const nivelesOrdenados = niveles.sort((a, b) => a.puntosRequeridos - b.puntosRequeridos);
  let progresionValida = true;
  
  for (let i = 1; i < nivelesOrdenados.length; i++) {
    const anterior = nivelesOrdenados[i - 1];
    const actual = nivelesOrdenados[i];
    
    if (actual.puntosRequeridos <= anterior.puntosRequeridos) {
      console.log(`‚ùå ERROR: ${actual.nombre} (${actual.puntosRequeridos}) debe tener m√°s puntos que ${anterior.nombre} (${anterior.puntosRequeridos})`);
      progresionValida = false;
    } else {
      console.log(`‚úÖ ${anterior.nombre} ‚Üí ${actual.nombre}: +${actual.puntosRequeridos - anterior.puntosRequeridos} puntos`);
    }
  }
  
  // Resumen final
  console.log('\nüèÜ RESUMEN FINAL:');
  console.log('=================');
  
  if (nivelesFaltantes.length === 0 && progresionValida) {
    console.log('üéâ ¬°CONFIGURACI√ìN PERFECTA!');
    console.log('   ‚úÖ Todos los niveles requeridos presentes');
    console.log('   ‚úÖ Progresi√≥n l√≥gica v√°lida');
    console.log('   ‚úÖ Compatible con sistema central');
    console.log('   ‚úÖ Validaci√≥n deber√≠a pasar sin errores');
  } else {
    console.log('‚ö†Ô∏è CONFIGURACI√ìN CON PROBLEMAS:');
    if (nivelesFaltantes.length > 0) {
      console.log(`   ‚ùå Niveles faltantes: ${nivelesFaltantes.join(', ')}`);
    }
    if (!progresionValida) {
      console.log('   ‚ùå Progresi√≥n de puntos inv√°lida');
    }
  }
  
  console.log('\nüîÑ PR√ìXIMOS PASOS:');
  console.log('   1. Recarga la p√°gina del admin');
  console.log('   2. Verifica que no aparezcan errores de validaci√≥n');
  console.log('   3. Prueba editar tarjetas desde el admin');

} catch (error) {
  console.error('‚ùå Error en verificaci√≥n:', error);
}

console.log('\nüéØ ¬°TARJETAS DESCONFIGURACION SOLUCIONADA!');

module.exports = { businessId, configPath };
