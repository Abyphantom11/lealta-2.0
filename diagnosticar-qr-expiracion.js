const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function diagnosticarQRExpirations() {
  console.log('üîç DIAGN√ìSTICO DE EXPIRACI√ìN DE QR CODES DE RESERVAS');
  console.log('='.repeat(70));
  
  try {
    // 1. Obtener QR codes de reservas recientes
    const qrCodes = await prisma.reservationQRCode.findMany({
      include: {
        Reservation: {
          include: {
            ReservationSlot: true
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });

    console.log(`üìä QR codes de reservas encontrados: ${qrCodes.length}\n`);

    const ahora = new Date();
    console.log(`üïê Hora actual del servidor: ${ahora.toISOString()}`);
    console.log(`üåç Hora actual en Colombia: ${ahora.toLocaleString('es-CO', { timeZone: 'America/Bogota' })}\n`);

    for (const qr of qrCodes) {
      const reserva = qr.Reservation;
      
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      console.log(`üì± QR: ${qr.qrToken}`);
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      
      console.log(`üë§ Cliente: ${reserva.customerName}`);
      console.log(`üìÖ Reserva para: ${reserva.reservedAt.toISOString()}`);
      console.log(`üìÖ Reserva (Colombia): ${reserva.reservedAt.toLocaleString('es-CO', { timeZone: 'America/Bogota' })}`);
      
      console.log(`‚è∞ QR expira: ${qr.expiresAt.toISOString()}`);
      console.log(`‚è∞ QR expira (Colombia): ${qr.expiresAt.toLocaleString('es-CO', { timeZone: 'America/Bogota' })}`);
      
      // Calcular diferencias
      const tiempoReserva = reserva.reservedAt.getTime();
      const tiempoExpiracion = qr.expiresAt.getTime();
      const diferenciaHoras = (tiempoExpiracion - tiempoReserva) / (1000 * 60 * 60);
      
      console.log(`‚è±Ô∏è Diferencia: ${diferenciaHoras.toFixed(1)} horas entre reserva y expiraci√≥n`);
      
      // Verificar si est√° expirado
      const msParaExpirar = qr.expiresAt.getTime() - ahora.getTime();
      const horasParaExpirar = msParaExpirar / (1000 * 60 * 60);
      
      if (msParaExpirar > 0) {
        console.log(`‚úÖ Estado: V√ÅLIDO (expira en ${horasParaExpirar.toFixed(1)} horas)`);
      } else {
        console.log(`‚ùå Estado: EXPIRADO (hace ${Math.abs(horasParaExpirar).toFixed(1)} horas)`);
        console.log('üö® PROBLEMA DETECTADO');
      }
      
      console.log('');
    }

    // 2. Analizar patr√≥n de expiraci√≥n incorrecta
    const ahoraUTC = new Date();
    const qrsExpirados = qrCodes.filter(qr => qr.expiresAt.getTime() < ahoraUTC.getTime());
    
    if (qrsExpirados.length > 0) {
      console.log('üö® QR CODES EXPIRADOS ENCONTRADOS:');
      console.log('‚ïê'.repeat(50));
      
      for (const qr of qrsExpirados) {
        const horasExpirado = (ahoraUTC.getTime() - qr.expiresAt.getTime()) / (1000 * 60 * 60);
        console.log(`‚ùå ${qr.qrToken} - Expirado hace ${horasExpirado.toFixed(1)} horas`);
        
        // Simular fecha de expiraci√≥n correcta (en timezone de Colombia)
        const fechaReservaCorrecta = new Date(qr.Reservation.reservedAt);
        
        // Si la reserva fue creada con timezone incorrecto, ajustar
        const fechaExpiracionCorrecta = new Date(fechaReservaCorrecta.getTime() + (12 * 60 * 60 * 1000));
        
        console.log(`   üí° Deber√≠a expirar: ${fechaExpiracionCorrecta.toISOString()}`);
        console.log(`   üí° En Colombia: ${fechaExpiracionCorrecta.toLocaleString('es-CO', { timeZone: 'America/Bogota' })}`);
        
        // Verificar si ser√≠a v√°lido con el timezone correcto
        if (fechaExpiracionCorrecta.getTime() > ahoraUTC.getTime()) {
          console.log(`   ‚úÖ Con timezone correcto, SER√çA V√ÅLIDO`);
        } else {
          console.log(`   ‚ùå Incluso con timezone correcto, estar√≠a expirado`);
        }
        console.log('');
      }
    }

    // 3. Proponer soluci√≥n
    console.log('üí° SOLUCIONES PROPUESTAS:');
    console.log('‚ïê'.repeat(50));
    console.log('1. üîß Actualizar la l√≥gica de creaci√≥n de fechas para usar timezone de Colombia');
    console.log('2. üìÖ Extender fechas de expiraci√≥n de QR codes existentes');
    console.log('3. üåç Configurar el servidor para usar America/Bogota como timezone default');
    console.log('4. ‚öôÔ∏è Usar libraries como date-fns-tz para manejar timezones correctamente');
    
    // 4. Generar script de correcci√≥n
    if (qrsExpirados.length > 0) {
      console.log('\nüîß SCRIPT DE CORRECCI√ìN:');
      console.log('‚ïê'.repeat(30));
      console.log('Para corregir los QR codes expirados, ejecutar:');
      console.log('');
      
      for (const qr of qrsExpirados) {
        const nuevaExpiracion = new Date();
        nuevaExpiracion.setDate(nuevaExpiracion.getDate() + 1); // Extender 24 horas
        
        console.log(`// Corregir QR ${qr.qrToken}`);
        console.log(`await prisma.reservationQRCode.update({`);
        console.log(`  where: { id: '${qr.id}' },`);
        console.log(`  data: { expiresAt: new Date('${nuevaExpiracion.toISOString()}') }`);
        console.log(`});`);
        console.log('');
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

diagnosticarQRExpirations();
