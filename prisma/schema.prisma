generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN  // Dueño del negocio - acceso total
  ADMIN       // Administrador - gestión de staff y reportes
  STAFF       // Empleado - solo registro de consumos
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

model Business {
  id               String           @id @default(cuid())
  name             String           // "Restaurante Plaza"
  slug             String           @unique // "restaurante-plaza"
  subdomain        String           @unique // "rest-plaza" 
  customDomain     String?          // "pedidos.empresa.com" (opcional)
  subscriptionPlan SubscriptionPlan @default(BASIC)
  isActive         Boolean          @default(true)
  settings         Json?            // configuración personalizada
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relaciones
  users      User[]    @relation("BusinessUsers")
  clientes   Cliente[] @relation("BusinessClientes")
  locations  Location[] @relation("BusinessLocations")
  consumos   Consumo[] @relation("BusinessConsumos")
  // portalConfig PortalConfig? @relation("BusinessPortalConfig") // Removido temporalmente
  menuCategories MenuCategory[] @relation("BusinessMenuCategories")
}

model User {
  id           String   @id @default(cuid())
  businessId   String   // FK a Business - OBLIGATORIO
  email        String   
  passwordHash String
  name         String?
  role         Role     @default(STAFF)
  createdBy    String?  // ID del SuperAdmin que lo creó
  isActive     Boolean  @default(true)
  lastLogin    DateTime?
  permissions  Json?    // Permisos específicos granulares
  loginAttempts Int     @default(0) // Control de intentos fallidos
  lockedUntil  DateTime? // Bloqueo temporal por intentos fallidos
  sessionToken String?   // Token de sesión único
  sessionExpires DateTime? // Expiración de sesión
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relaciones
  business     Business @relation("BusinessUsers", fields: [businessId], references: [id], onDelete: Cascade)
  creator      User?    @relation("UserHierarchy", fields: [createdBy], references: [id])
  createdUsers User[]   @relation("UserHierarchy")
  consumos     Consumo[] @relation("EmpleadoConsumos")

  // Email único por empresa
  @@unique([businessId, email])
}

model Location {
  id        String    @id @default(cuid())
  businessId String   // FK a Business
  name      String
  createdAt DateTime  @default(now())
  
  // Relaciones
  business  Business  @relation("BusinessLocations", fields: [businessId], references: [id], onDelete: Cascade)
  consumos  Consumo[]
}

model Cliente {
  id           String     @id @default(cuid())
  businessId   String?    // FK a Business - temporalmente opcional
  cedula       String     @unique // Cédula única global temporalmente
  nombre       String
  correo       String
  telefono     String
  puntos       Int        @default(0)
  totalVisitas Int        @default(0)
  totalGastado Float      @default(0)
  defaultCount Int        @default(0)
  riskLevel    String     @default("LOW") // LOW, MEDIUM, HIGH
  lastLogin    DateTime?
  portalViews  Int        @default(0)
  registeredAt DateTime   @default(now())
  
  // Relaciones
  business     Business?  @relation("BusinessClientes", fields: [businessId], references: [id], onDelete: Cascade)
  consumos     Consumo[]
  visits       VisitLog[]

  // Temporalmente removemos la restricción compuesta
  // @@unique([businessId, cedula])
}

model Consumo {
  id             String    @id @default(cuid())
  businessId     String?   // FK a Business - temporalmente opcional
  clienteId      String
  locationId     String
  productos      Json // items parseados por OCR
  total          Float
  puntos         Int       @default(0)
  empleadoId     String // User.id que lo registró
  pagado         Boolean   @default(false)
  metodoPago     String?
  registeredAt   DateTime  @default(now())
  paidAt         DateTime?
  ticketImageUrl String? // imagen subida del ticket
  ocrText        String? // texto crudo del OCR

  // Relaciones
  business Business? @relation("BusinessConsumos", fields: [businessId], references: [id], onDelete: Cascade)
  cliente  Cliente  @relation(fields: [clienteId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  empleado User     @relation("EmpleadoConsumos", fields: [empleadoId], references: [id])
}

model VisitLog {
  id        String   @id @default(cuid())
  clienteId String
  action    String // "portal_visit" | "menu_view" | "promo_view" | "check_in"
  metadata  Json?
  timestamp DateTime @default(now())

  cliente Cliente @relation(fields: [clienteId], references: [id])
}

// Configuración del Portal Cliente
model PortalConfig {
  id         String   @id @default(cuid())
  businessId String   @unique
  
  // Banners y promociones
  banners    Json     // Array de banners con imagen, título, descripción, fechas
  promociones Json    // Array de promociones activas
  eventos    Json     // Eventos del día/semana
  
  // Configuración de recompensas
  recompensas Json    // Catálogo de recompensas canjeables por puntos
  
  // Favorito del día
  favoritoDelDia Json? // Producto favorito del día con imagen
  
  // Configuración visual
  colores    Json?    // Theme colors personalizados
  logo       String?  // URL del logo del negocio
  
  // Metadatos
  isActive   Boolean  @default(true)
  updatedAt  DateTime @updatedAt
  updatedBy  String   // User ID que hizo el último cambio
  
  // Relaciones removidas temporalmente para evitar constraint issues
  // business   Business @relation("BusinessPortalConfig", fields: [businessId], references: [id], onDelete: Cascade)
}

// Gestión del Menú
model MenuCategory {
  id          String      @id @default(cuid())
  businessId  String
  nombre      String      // "Cócteles", "Mockteles", "Platos", "Botellas"
  descripcion String?
  orden       Int         @default(0)
  isActive    Boolean     @default(true)
  icono       String?     // Nombre del icono o URL
  
  // Relaciones
  business    Business    @relation("BusinessMenuCategories", fields: [businessId], references: [id], onDelete: Cascade)
  productos   MenuProduct[]
  
  @@unique([businessId, nombre])
}

model MenuProduct {
  id           String       @id @default(cuid())
  categoryId   String
  nombre       String
  descripcion  String?
  precio       Float
  precioVaso   Float?       // Para botellas que se pueden pedir por vaso
  imagen       String?      // URL de la imagen del producto
  isAvailable  Boolean      @default(true)
  isDestacado  Boolean      @default(false) // Producto destacado
  orden        Int          @default(0)
  
  // Opciones del producto
  opciones     Json?        // Array de opciones como tamaños, extras, etc.
  
  // Metadatos
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relaciones
  category     MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, nombre])
}
