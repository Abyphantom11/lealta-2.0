generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BrandingConfig {
  id             String   @id
  businessId     String   @unique
  businessName   String?
  primaryColor   String?
  secondaryColor String?
  accentColor    String?
  logoUrl        String?
  carouselImages String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model Business {
  id                   String                 @id
  name                 String
  slug                 String                 @unique
  subdomain            String                 @unique
  customDomain         String?
  subscriptionPlan     SubscriptionPlan       @default(BASIC)
  isActive             Boolean                @default(true)
  settings             Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  clientTheme          String?                @default("moderno")
  qrBrandingConfig     Json?                  @default("{}")
  qrMensajeBienvenida  String?                @default("Â¡Te esperamos!")
  qrMostrarLogo        Boolean                @default(true)
  clientThemeConfig    Json?                  @default("{}")
  BrandingConfig       BrandingConfig?
  BusinessGoals        BusinessGoals?
  Cliente              Cliente[]
  Consumo              Consumo[]
  GuestConsumo         GuestConsumo[]
  HostTracking         HostTracking[]
  Location             Location[]
  MenuCategory         MenuCategory[]
  PortalBanner         PortalBanner[]
  PortalFavoritoDelDia PortalFavoritoDelDia[]
  PortalPromocion      PortalPromocion[]
  PortalRecompensa     PortalRecompensa[]
  PortalTarjetasConfig PortalTarjetasConfig?
  Promotor             Promotor[]
  PuntosConfig         PuntosConfig?
  QRLink               QRLink[]
  ReservationService   ReservationService[]
  User                 User[]
  Visita               Visita[]
}

model BusinessGoals {
  id                   String   @id
  businessId           String   @unique
  dailyRevenue         Float    @default(100)
  weeklyRevenue        Float    @default(700)
  monthlyRevenue       Float    @default(3000)
  dailyClients         Int      @default(5)
  weeklyClients        Int      @default(25)
  monthlyClients       Int      @default(100)
  dailyTransactions    Int      @default(8)
  weeklyTransactions   Int      @default(50)
  monthlyTransactions  Int      @default(200)
  targetTicketAverage  Float    @default(20)
  targetRetentionRate  Float    @default(70)
  targetConversionRate Float    @default(80)
  targetTopClient      Float    @default(150)
  targetActiveClients  Int      @default(50)
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  Business             Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Cliente {
  id               String           @id
  businessId       String
  cedula           String
  nombre           String
  correo           String
  telefono         String
  puntos           Int              @default(0)
  puntosAcumulados Int              @default(0)
  totalVisitas     Int              @default(0)
  totalGastado     Float            @default(0)
  defaultCount     Int              @default(0)
  riskLevel        String           @default("LOW")
  lastLogin        DateTime?
  portalViews      Int              @default(0)
  registeredAt     DateTime         @default(now())
  Business         Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Consumo          Consumo[]
  HistorialCanje   HistorialCanje[]
  HostTracking     HostTracking[]
  Reservation      Reservation[]
  TarjetaLealtad   TarjetaLealtad?
  VisitLog         VisitLog[]
  Visita           Visita[]

  @@unique([businessId, cedula])
}

model ConfiguracionTarjeta {
  id                  String   @id
  businessId          String   @unique
  nivel               String
  nombrePersonalizado String
  textoCalidad        String
  puntosMinimos       Int      @default(0)
  gastosMinimos       Float    @default(0)
  visitasMinimas      Int      @default(0)
  beneficio           String?
  beneficiosExtra     Json?
  colores             Json
  activa              Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime

  @@unique([businessId, nivel])
}

model Consumo {
  id             String        @id
  businessId     String
  clienteId      String
  locationId     String
  productos      Json
  total          Float
  puntos         Int           @default(0)
  empleadoId     String
  pagado         Boolean       @default(false)
  metodoPago     String?
  registeredAt   DateTime      @default(now())
  paidAt         DateTime?
  ticketImageUrl String?
  ocrText        String?
  Business       Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Cliente        Cliente       @relation(fields: [clienteId], references: [id])
  User           User          @relation(fields: [empleadoId], references: [id])
  Location       Location      @relation(fields: [locationId], references: [id])
  GuestConsumo   GuestConsumo?
}

model EmailLog {
  id           String    @id
  to           String
  from         String
  subject      String
  type         String
  resendId     String?
  status       String    @default("pending")
  errorMessage String?
  businessId   String?
  sentAt       DateTime  @default(now())
  deliveredAt  DateTime?
  metadata     Json?

  @@index([sentAt])
  @@index([status])
  @@index([to])
  @@index([type])
}

model EmailVerification {
  id           String    @id
  email        String
  code         String
  type         String    @default("email-verification")
  businessId   String?
  businessName String?
  verified     Boolean   @default(false)
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  expiresAt    DateTime
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  metadata     Json?

  @@unique([email, code, type])
  @@index([code])
  @@index([email])
  @@index([expiresAt])
}

model EstadisticaVisita {
  id                 String   @id
  fecha              DateTime
  periodo            String
  totalVisitas       Int      @default(0)
  visitasRegistradas Int      @default(0)
  visitasAnonimas    Int      @default(0)
  sesionesUnicas     Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime

  @@unique([fecha, periodo])
}

model GuestConsumo {
  id             String       @id
  businessId     String
  hostTrackingId String
  consumoId      String       @unique
  guestCedula    String?
  guestName      String?
  createdAt      DateTime     @default(now())
  Business       Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Consumo        Consumo      @relation(fields: [consumoId], references: [id], onDelete: Cascade)
  HostTracking   HostTracking @relation(fields: [hostTrackingId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([consumoId])
  @@index([hostTrackingId])
}

model HistorialCanje {
  id                String   @id
  businessId        String?
  clienteId         String
  clienteNombre     String
  clienteCedula     String
  recompensaId      String
  recompensaNombre  String
  puntosDescontados Int
  empleadoId        String?
  metadata          Json?
  createdAt         DateTime @default(now())
  Cliente           Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  User              User?    @relation(fields: [empleadoId], references: [id])

  @@index([businessId])
  @@index([clienteId])
  @@index([createdAt])
}

model HostTracking {
  id              String         @id
  businessId      String
  reservationId   String         @unique
  clienteId       String
  reservationName String
  tableNumber     String?
  reservationDate DateTime
  guestCount      Int
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  GuestConsumo    GuestConsumo[]
  Business        Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Cliente         Cliente        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  Reservation     Reservation    @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([clienteId])
  @@index([isActive])
  @@index([reservationDate])
  @@index([reservationId])
  @@index([tableNumber])
}

model Location {
  id         String    @id
  businessId String
  name       String
  createdAt  DateTime  @default(now())
  Consumo    Consumo[]
  Business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model MenuCategory {
  id                 String         @id
  businessId         String
  nombre             String
  descripcion        String?
  orden              Int            @default(0)
  activo             Boolean        @default(true)
  icono              String?
  parentId           String?
  Business           Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  MenuCategory       MenuCategory?  @relation("MenuCategoryToMenuCategory", fields: [parentId], references: [id], onDelete: Cascade)
  other_MenuCategory MenuCategory[] @relation("MenuCategoryToMenuCategory")
  MenuProduct        MenuProduct[]

  @@unique([businessId, nombre, parentId])
}

model MenuProduct {
  id            String       @id
  categoryId    String
  nombre        String
  descripcion   String?
  precio        Float?
  precioVaso    Float?
  precioBotella Float?
  tipoProducto  String       @default("simple")
  disponible    Boolean      @default(true)
  destacado     Boolean      @default(false)
  orden         Int          @default(0)
  imagenUrl     String?
  opciones      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  MenuCategory  MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, nombre])
}

model PortalBanner {
  id          String   @id
  businessId  String
  title       String
  description String?
  imageUrl    String?
  linkUrl     String?
  dia         String?
  active      Boolean  @default(true)
  orden       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([businessId])
  @@index([orden])
}

model PortalConfig {
  id               String   @id
  businessId       String   @unique
  banners          Json
  promociones      Json
  eventos          Json
  recompensas      Json
  favoritoDelDia   Json?
  colores          Json?
  logo             String?
  isActive         Boolean  @default(true)
  updatedAt        DateTime
  updatedBy        String
  promocionesTitle String?  @default("Promociones Especiales")
  recompensasTitle String?  @default("Recompensas")
}

model PortalFavoritoDelDia {
  id            String   @id
  businessId    String
  productName   String
  description   String?
  imageUrl      String?
  originalPrice String?
  specialPrice  String?
  specialOffer  String?
  dia           String?
  active        Boolean  @default(true)
  date          DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([businessId])
  @@index([date])
}

model PortalPromocion {
  id          String    @id
  businessId  String
  title       String
  description String?
  imageUrl    String?
  discount    String?
  validUntil  DateTime?
  dia         String?
  active      Boolean   @default(true)
  orden       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([businessId])
  @@index([orden])
  @@index([validUntil])
}

model PortalRecompensa {
  id          String   @id
  businessId  String
  title       String
  description String?
  imageUrl    String?
  pointsCost  Int
  category    String?
  active      Boolean  @default(true)
  orden       Int      @default(0)
  stock       Int?
  unlimited   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([businessId])
  @@index([category])
  @@index([orden])
  @@index([pointsCost])
}

model PortalTarjetasConfig {
  id             String   @id
  businessId     String   @unique
  showLevels     Boolean  @default(true)
  showProgress   Boolean  @default(true)
  showBenefits   Boolean  @default(true)
  showPointsInfo Boolean  @default(true)
  levelsConfig   Json?
  pointsConfig   Json?
  visualConfig   Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model Promotor {
  id          String        @id
  businessId  String
  nombre      String
  telefono    String?
  email       String?
  activo      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  createdBy   String?
  Business    Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Reservation Reservation[]

  @@unique([businessId, nombre])
  @@index([activo])
  @@index([businessId])
}

model PuntosConfig {
  id                String   @id
  businessId        String   @unique
  puntosPorDolar    Int      @default(2)
  bonusPorRegistro  Int      @default(100)
  maxPuntosPorDolar Int      @default(10)
  maxBonusRegistro  Int      @default(1000)
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  Business          Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model QRClick {
  id        String   @id
  qrLinkId  String
  ipAddress String
  userAgent String?
  referer   String?
  country   String?
  city      String?
  clickedAt DateTime @default(now())
  QRLink    QRLink   @relation(fields: [qrLinkId], references: [id], onDelete: Cascade)

  @@index([clickedAt])
  @@index([ipAddress])
  @@index([qrLinkId])
}

model QRLink {
  id          String    @id
  shortId     String    @unique
  businessId  String?
  name        String
  description String?
  targetUrl   String
  backupUrl   String?
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  clickCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  QRClick     QRClick[]
  Business    Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([expiresAt])
  @@index([isActive])
  @@index([shortId])
}

model QRShareLink {
  id            String      @id
  shareId       String      @unique
  reservationId String
  message       String
  qrImageUrl    String?     @db.Text // â Almacenar imagen del QR Card (base64 o URL)
  views         Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([reservationId])
  @@index([shareId])
}

model Reservation {
  id                 String              @id
  businessId         String
  clienteId          String?
  serviceId          String
  slotId             String
  reservationNumber  String              @unique
  status             ReservationStatus   @default(PENDING)
  customerName       String
  customerEmail      String
  customerPhone      String?
  guestCount         Int
  specialRequests    String?
  notes              String?
  totalPrice         Decimal?            @db.Decimal(10, 2)
  paidAmount         Decimal             @default(0) @db.Decimal(10, 2)
  isPaid             Boolean             @default(false)
  paymentReference   String?
  reservedAt         DateTime
  confirmedAt        DateTime?
  checkedInAt        DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  reminderSent       Boolean             @default(false)
  reminderSentAt     DateTime?
  source             String              @default("manual")
  metadata           Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  promotorId         String?             @default("whatsapp-default")
  tableNumber        String?
  HostTracking       HostTracking?
  QRShareLink        QRShareLink[]
  Cliente            Cliente?            @relation(fields: [clienteId], references: [id])
  Promotor           Promotor?           @relation(fields: [promotorId], references: [id])
  ReservationService ReservationService  @relation(fields: [serviceId], references: [id])
  ReservationSlot    ReservationSlot     @relation(fields: [slotId], references: [id])
  ReservationQRCode  ReservationQRCode[]

  @@index([businessId])
  @@index([clienteId])
  @@index([promotorId])
  @@index([reservedAt])
  @@index([serviceId])
  @@index([slotId])
  @@index([status])
}

model ReservationQRCode {
  id            String       @id
  businessId    String
  qrToken       String       @unique
  qrData        String
  status        QRCodeStatus @default(ACTIVE)
  expiresAt     DateTime
  usedAt        DateTime?
  usedBy        String?
  scanCount     Int          @default(0)
  lastScannedAt DateTime?
  metadata      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  reservationId String
  Reservation   Reservation  @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([expiresAt])
  @@index([qrToken])
  @@index([reservationId])
  @@index([status])
}

model ReservationService {
  id              String            @id
  businessId      String
  name            String
  description     String?
  capacity        Int               @default(50)
  duration        Int               @default(120)
  price           Decimal?          @db.Decimal(10, 2)
  isActive        Boolean           @default(true)
  metadata        Json?
  sortOrder       Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Reservation     Reservation[]
  Business        Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  ReservationSlot ReservationSlot[]

  @@index([businessId])
  @@index([isActive])
}

model ReservationSlot {
  id                 String             @id
  businessId         String
  serviceId          String
  date               DateTime           @db.Date
  startTime          DateTime
  endTime            DateTime
  capacity           Int
  reservedCount      Int                @default(0)
  status             SlotStatus         @default(AVAILABLE)
  price              Decimal?           @db.Decimal(10, 2)
  notes              String?
  isRecurring        Boolean            @default(false)
  recurringId        String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  Reservation        Reservation[]
  ReservationService ReservationService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([date])
  @@index([serviceId])
  @@index([status])
}

model SinReserva {
  id             String   @id
  businessId     String
  numeroPersonas Int
  fecha          DateTime
  hora           String
  registradoPor  String?
  notas          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime

  @@index([businessId])
  @@index([createdAt])
  @@index([fecha])
}

model TarjetaLealtad {
  id               String   @id
  clienteId        String   @unique
  businessId       String
  nivel            String
  fechaAsignacion  DateTime @default(now())
  asignacionManual Boolean  @default(false)
  activa           Boolean  @default(true)
  puntosProgreso   Int      @default(0)
  historicoNiveles Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  Cliente          Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id
  businessId     String
  email          String
  passwordHash   String
  name           String?
  role           Role             @default(STAFF)
  createdBy      String?
  isActive       Boolean          @default(true)
  lastLogin      DateTime?
  permissions    Json?
  loginAttempts  Int              @default(0)
  lockedUntil    DateTime?
  sessionToken   String?
  sessionExpires DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Consumo        Consumo[]
  HistorialCanje HistorialCanje[]
  business       Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  User           User?            @relation("UserToUser", fields: [createdBy], references: [id])
  other_User     User[]           @relation("UserToUser")

  @@unique([businessId, email])
}

model VisitLog {
  id        String   @id
  clienteId String
  action    String
  metadata  Json?
  timestamp DateTime @default(now())
  Cliente   Cliente  @relation(fields: [clienteId], references: [id])
}

model Visita {
  id           String   @id
  clienteId    String?
  sessionId    String
  businessId   String
  timestamp    DateTime @default(now())
  userAgent    String?
  ip           String?
  referrer     String?
  path         String   @default("/cliente")
  isRegistered Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Cliente      Cliente? @relation(fields: [clienteId], references: [id])

  @@index([businessId])
  @@index([clienteId])
  @@index([path])
  @@index([sessionId])
  @@index([timestamp])
}

enum QRCodeStatus {
  ACTIVE
  USED
  EXPIRED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum Role {
  SUPERADMIN
  ADMIN
  STAFF
}

enum SlotStatus {
  AVAILABLE
  RESERVED
  FULL
  BLOCKED
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}
