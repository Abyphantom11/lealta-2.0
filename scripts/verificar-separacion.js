const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function verificarSeparacion() {
  console.log('üîç VERIFICANDO SEPARACI√ìN POR BUSINESS EN POSTGRESQL');
  console.log('================================================');
  
  try {
    // 1. Verificar Businesses existentes
    const businesses = await prisma.business.findMany();
    console.log('\nüìä BUSINESSES EN LA BD:');
    businesses.forEach(b => {
      console.log(`  - ${b.name} (ID: ${b.id}, Slug: ${b.slug})`);
    });
    
    // 2. Verificar Usuarios por Business
    console.log('\nüë• USUARIOS POR BUSINESS:');
    for (const business of businesses) {
      const users = await prisma.user.findMany({
        where: { businessId: business.id }
      });
      console.log(`  ${business.name}: ${users.length} usuarios`);
      users.forEach(u => console.log(`    - ${u.name} (${u.email}, ${u.role})`));
    }
    
    // 3. Verificar Clientes por Business
    console.log('\nüõí CLIENTES POR BUSINESS:');
    for (const business of businesses) {
      const clientes = await prisma.cliente.findMany({
        where: { businessId: business.id }
      });
      console.log(`  ${business.name}: ${clientes.length} clientes`);
      clientes.forEach(c => console.log(`    - ${c.nombre} (Puntos: ${c.puntos})`));
    }
    
    // 4. Verificar MenuCategories por Business
    console.log('\nüìã CATEGOR√çAS DE MEN√ö POR BUSINESS:');
    for (const business of businesses) {
      const categories = await prisma.menuCategory.findMany({
        where: { businessId: business.id }
      });
      console.log(`  ${business.name}: ${categories.length} categor√≠as`);
      categories.forEach(c => console.log(`    - ${c.nombre}`));
    }
    
    // 5. Verificar separaci√≥n efectiva (no buscar nulls, ya no existen)
    console.log('\n‚úÖ VERIFICANDO SEPARACI√ìN EFECTIVA:');
    
    // Ya no podemos buscar businessId null porque es obligatorio
    console.log('  - businessId es ahora OBLIGATORIO ‚úÖ');
    console.log('  - Constraint √∫nico por business en c√©dulas ‚úÖ');
    
    // 6. Verificar separaci√≥n efectiva
    console.log('\n‚úÖ RESUMEN DE SEPARACI√ìN:');
    const totalBusinesses = businesses.length;
    const businessesConDatos = [];
    
    for (const business of businesses) {
      const users = await prisma.user.count({ where: { businessId: business.id } });
      const clientes = await prisma.cliente.count({ where: { businessId: business.id } });
      const categories = await prisma.menuCategory.count({ where: { businessId: business.id } });
      
      if (users > 0 || clientes > 0 || categories > 0) {
        businessesConDatos.push(business.name);
      }
      
      console.log(`  ${business.name}:`);
      console.log(`    - Usuarios: ${users}`);
      console.log(`    - Clientes: ${clientes}`);
      console.log(`    - Categor√≠as Men√∫: ${categories}`);
    }
    
    console.log(`\nüìà ESTAD√çSTICAS FINALES:`);
    console.log(`  - Total businesses: ${totalBusinesses}`);
    console.log(`  - Businesses con datos: ${businessesConDatos.length}`);
    console.log(`  - Separaci√≥n efectiva: ${totalBusinesses > 1 && businessesConDatos.length > 1 ? '‚úÖ S√ç' : '‚ùå NO'}`);
    console.log(`  - Aislamiento por businessId: ‚úÖ OBLIGATORIO`);
    console.log(`  - Constraint √∫nico por business: ‚úÖ ACTIVO`);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarSeparacion();
