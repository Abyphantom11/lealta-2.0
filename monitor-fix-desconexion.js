/**
 * Monitor para verificar que la desconexi√≥n admin ‚Üí cliente est√© arreglada
 */

const PRODUCTION_URL = 'https://lealta.vercel.app';
const BUSINESS_ID = 'cmfw0fujf0000eyv8eyhgfzja';

async function monitorearArregloDesconexion() {
  console.log('üîß MONITOREANDO ARREGLO DE DESCONEXI√ìN ADMIN ‚Üí CLIENTE\n');
  console.log(`‚è∞ ${new Date().toLocaleTimeString()} - Esperando que funcione la sincronizaci√≥n`);
  
  let attempts = 0;
  const maxAttempts = 10; // 5 minutos m√°ximo
  
  const checkConnection = async () => {
    attempts++;
    const timestamp = Date.now();
    
    console.log(`\nüì° Verificaci√≥n ${attempts}/${maxAttempts} - ${new Date().toLocaleTimeString()}`);
    
    try {
      // Probar API del cliente
      const response = await fetch(`${PRODUCTION_URL}/api/portal/config-v2?businessId=${BUSINESS_ID}&t=${timestamp}`, {
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        
        const nombreEmpresa = data.data?.nombreEmpresa || 'No encontrado';
        const tarjetasCount = data.data?.tarjetas?.length || 0;
        
        console.log(`   üìä Datos recibidos:`);
        console.log(`     Nombre empresa: "${nombreEmpresa}"`);
        console.log(`     Tarjetas: ${tarjetasCount}`);
        
        if (tarjetasCount > 0) {
          console.log(`   üé¥ Detalles de tarjetas:`);
          data.data.tarjetas.forEach((tarjeta, i) => {
            const isCustomBenefit = tarjeta.beneficio === '9 dadadasd';
            const emoji = isCustomBenefit ? '‚úÖ' : 'üìã';
            console.log(`     ${i + 1}. ${tarjeta.nivel}: ${emoji} "${tarjeta.beneficio}"`);
          });
        }
        
        // ‚úÖ CRITERIOS DE √âXITO:
        const hasCorrectName = nombreEmpresa === 'love me sky';
        const hasTarjetas = tarjetasCount > 0;
        const hasCustomBenefit = data.data?.tarjetas?.some(t => t.beneficio === '9 dadadasd');
        
        console.log(`\n   üéØ Estado de la conexi√≥n:`);
        console.log(`     ${hasCorrectName ? '‚úÖ' : '‚ùå'} Nombre empresa: ${hasCorrectName ? 'Correcto' : 'Incorrecto'}`);
        console.log(`     ${hasTarjetas ? '‚úÖ' : '‚ùå'} Tarjetas: ${hasTarjetas ? 'Encontradas' : 'No encontradas'}`);
        console.log(`     ${hasCustomBenefit ? '‚úÖ' : '‚ùå'} Beneficio personalizado: ${hasCustomBenefit ? 'Funciona' : 'No funciona'}`);
        
        if (hasCorrectName && hasTarjetas && hasCustomBenefit) {
          console.log('\nüéâ ¬°√âXITO COMPLETO! La desconexi√≥n est√° arreglada:');
          console.log('   ‚úÖ El admin panel ahora se sincroniza correctamente con el cliente');
          console.log('   ‚úÖ Los cambios del admin aparecen inmediatamente');
          console.log('   ‚úÖ El nombre de empresa se actualiza correctamente');
          console.log('   ‚úÖ Los beneficios personalizados funcionan');
          
          console.log('\nüöÄ PR√ìXIMOS PASOS PARA EL USUARIO:');
          console.log('   1. Ir al panel admin (/admin/portal)');
          console.log('   2. Editar "Nombre de la Empresa en Tarjetas"');
          console.log('   3. Los cambios aparecer√°n inmediatamente en el cliente');
          console.log('   4. ¬°No necesita m√°s edici√≥n manual de archivos!');
          
          return true; // ¬°√âxito completo!
        } else if (hasTarjetas) {
          console.log('\n‚ö° PROGRESO: Tarjetas funcionan, nombre en proceso...');
          return false; // Continuar monitoreando
        } else {
          console.log('\n‚è≥ Deploy a√∫n en progreso...');
          return false;
        }
        
      } else {
        console.log(`   ‚ùå Error HTTP: ${response.status}`);
        return false;
      }
      
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
      return false;
    }
  };
  
  // Verificar inmediatamente
  const isFixed = await checkConnection();
  if (isFixed) return;
  
  // Configurar intervalo cada 30 segundos
  const interval = setInterval(async () => {
    const isFixed = await checkConnection();
    
    if (isFixed || attempts >= maxAttempts) {
      clearInterval(interval);
      
      if (attempts >= maxAttempts && !isFixed) {
        console.log('\n‚ö†Ô∏è Tiempo agotado. El fix puede necesitar m√°s tiempo.');
        console.log('üí° Intenta refrescar el navegador o ejecuta el script nuevamente.');
      }
    }
  }, 30000); // Cada 30 segundos
  
  console.log('\n‚è±Ô∏è Verificando cada 30 segundos... (Ctrl+C para cancelar)');
}

monitorearArregloDesconexion();
