const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verQRMenu() {
  try {
    console.log('üîç BUSCANDO TODOS LOS QR CODES...\n');
    
    // Primero, buscar todos los QR codes para encontrar el que tiene problemas
    const todosLosQRs = await prisma.qRLink.findMany({
      include: {
        Business: {
          select: { 
            id: true,
            name: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìä Total QR codes encontrados: ${todosLosQRs.length}\n`);

    for (const qr of todosLosQRs) {
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      console.log(`üì± QR CODE: ${qr.name || 'Sin nombre'}`);
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      console.log('üÜî ID:', qr.id);
      console.log('üîó Short ID:', qr.shortId);
      console.log('üéØ Target URL:', qr.targetUrl);
      console.log('‚úÖ Estado:', qr.isActive ? 'üü¢ ACTIVO' : 'üî¥ INACTIVO');
      console.log('üè™ Business:', qr.Business?.name || 'Sin negocio');
      
      // VERIFICAR EXPIRACI√ìN
      const ahora = new Date();
      console.log('üìÖ Fecha actual:', ahora.toISOString());
      
      if (qr.expiresAt) {
        console.log('‚è∞ Fecha de expiraci√≥n:', qr.expiresAt.toISOString());
        
        const msParaExpirar = qr.expiresAt.getTime() - ahora.getTime();
        const diasParaExpirar = Math.floor(msParaExpirar / (1000 * 60 * 60 * 24));
        const horasParaExpirar = Math.floor(msParaExpirar / (1000 * 60 * 60));
        
        if (msParaExpirar > 0) {
          console.log(`‚è≥ Expira en: ${diasParaExpirar} d√≠as (${horasParaExpirar} horas)`);
          console.log('‚úÖ QR V√ÅLIDO');
        } else {
          console.log(`‚ùå EXPIRADO hace: ${Math.abs(diasParaExpirar)} d√≠as (${Math.abs(horasParaExpirar)} horas)`);
          console.log('üö® ESTE QR EST√Å VENCIDO');
        }
      } else {
        console.log('‚ôæÔ∏è Sin fecha de expiraci√≥n (permanente)');
        console.log('‚úÖ QR V√ÅLIDO (nunca expira)');
      }
      
      console.log('üìà Total clicks:', qr.clickCount);
      console.log('');
    }

    // Buscar QR espec√≠fico si hay uno problem√°tico
    const ahora = new Date();
    const qrsExpirados = todosLosQRs.filter(qr => qr.expiresAt && qr.expiresAt.getTime() < ahora.getTime());
    
    if (qrsExpirados.length > 0) {
      console.log('üö® QRS EXPIRADOS ENCONTRADOS:');
      console.log('‚ïê'.repeat(50));
      
      for (const qr of qrsExpirados) {
        const diasExpirado = Math.floor((ahora.getTime() - qr.expiresAt.getTime()) / (1000 * 60 * 60 * 24));
        console.log(`‚ùå ${qr.name || qr.shortId} - Expirado hace ${diasExpirado} d√≠as`);
        console.log(`   URL: ${qr.targetUrl}`);
        console.log(`   Short ID: ${qr.shortId}`);
        
        // PROPUESTA DE SOLUCI√ìN: Extender la fecha
        const nuevaFechaExpiracion = new Date(ahora);
        nuevaFechaExpiracion.setDate(nuevaFechaExpiracion.getDate() + 30); // Extender 30 d√≠as
        
        console.log(`üí° SOLUCI√ìN: Actualizar expiresAt a: ${nuevaFechaExpiracion.toISOString()}`);
        console.log('');
      }
    }

    // Si mencionaste que pasaste del 25 al 26, buscar QRs con fechas espec√≠ficas
    console.log('üîç ANALIZANDO FECHAS ESPEC√çFICAS (25 vs 26):');
    console.log('‚ïê'.repeat(50));
    
    const fecha25 = new Date('2024-10-25');
    const fecha26 = new Date('2024-10-26');
    const fechaHoy = new Date();
    
    console.log(`üìÖ Fecha 25: ${fecha25.toISOString()}`);
    console.log(`üìÖ Fecha 26: ${fecha26.toISOString()}`);
    console.log(`üìÖ Fecha hoy: ${fechaHoy.toISOString()}`);
    
    for (const qr of todosLosQRs) {
      if (qr.expiresAt) {
        const expiraDate = new Date(qr.expiresAt);
        console.log(`üîç QR ${qr.shortId}: expira ${expiraDate.toLocaleDateString()}`);
        
        if (expiraDate.toDateString() === fecha25.toDateString()) {
          console.log('   üìå ESTE QR EXPIRABA EL 25 - ¬°PUEDE SER EL PROBLEMA!');
        }
        if (expiraDate.toDateString() === fecha26.toDateString()) {
          console.log('   ‚úÖ Este QR expira el 26 - funcionar√° hoy');
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verQRMenu();
