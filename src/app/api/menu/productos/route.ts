import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

// Indicar a Next.js que esta ruta es din√°mica
export const dynamic = 'force-dynamic';

const prisma = new PrismaClient();

// GET - Obtener productos por categor√≠a para el cliente
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const categoriaId = searchParams.get('categoriaId');

    console.log(
      `üìã GET /api/menu/productos - Obteniendo productos para categor√≠a: ${categoriaId}`
    );

    if (!categoriaId) {
      console.log('‚ùå ID de categor√≠a no proporcionado');
      return NextResponse.json(
        { error: 'ID de categor√≠a es requerido' },
        { status: 400 }
      );
    }

    // üîí BUSINESS ISOLATION: Obtener businessId desde headers del middleware
    const businessId = request.headers.get('x-business-id');
    
    if (!businessId) {
      console.error('‚ùå SECURITY: Falta x-business-id header');
      return NextResponse.json(
        { error: 'Business context required' },
        { status: 400 }
      );
    }

    console.log('üè¢ Filtrando productos para businessId:', businessId);

    // üõ°Ô∏è FILTRAR POR BUSINESS - Solo productos del negocio actual
    const productos = await prisma.menuProduct.findMany({
      where: {
        categoryId: categoriaId,
        disponible: true,
        category: {
          businessId: businessId, // ‚úÖ BUSINESS ISOLATION
        },
      },
      orderBy: {
        orden: 'asc',
      },
    });

    console.log(
      `‚úÖ Se encontraron ${productos.length} productos para la categor√≠a ${categoriaId}`
    );
    return NextResponse.json(productos);
  } catch (error) {
    console.error('‚ùå Error obteniendo productos:', error);
    return NextResponse.json(
      { error: 'Error obteniendo productos de men√∫' },
      { status: 500 }
    );
  }
}
