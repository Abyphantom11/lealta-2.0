import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getBusinessIdFromRequest } from '@/lib/business-utils';
import { getCurrentBusinessDay } from '@/lib/business-day-utils';

const prisma = new PrismaClient();

// GET - Obtener promociones del portal
export async function GET(request: NextRequest) {
  try {
    // üî• CR√çTICO: Usar exactamente el mismo patr√≥n que branding (que funciona)
    const queryBusinessId = request.nextUrl.searchParams.get('businessId');
    const headerBusinessId = getBusinessIdFromRequest(request);
    const businessId = queryBusinessId || headerBusinessId;
    
    if (!businessId) {
      return NextResponse.json(
        { error: 'Business ID requerido' },
        { status: 400 }
      );
    }

    console.log(`üè¢ [PROMOCIONES] Using businessId: ${businessId} (from: ${queryBusinessId ? 'query' : 'header'})`);

    const promociones = await prisma.portalPromocion.findMany({
      where: {
        businessId,
        active: true,
        OR: [
          { validUntil: null }, // Sin fecha de vencimiento
          { validUntil: { gte: new Date() } } // Vigentes
        ]
      },
      orderBy: {
        orden: 'asc'
      }
    });

    // ‚úÖ CENTRALIZADO: Filtrar promociones usando l√≥gica de d√≠a comercial
    const currentDayName = await getCurrentBusinessDay(businessId);
    console.log(`üóìÔ∏è [PROMOCIONES] D√≠a comercial actual: ${currentDayName}`);
    
    // Filtrar promociones por visibilidad del d√≠a comercial
    const promocionesVisibles = [];
    
    for (const promocion of promociones) {
      // ‚úÖ Verificar si la promoci√≥n debe mostrarse hoy
      if (!promocion.dia || promocion.dia === 'todos') {
        // Sin restricci√≥n de d√≠a - siempre visible
        promocionesVisibles.push(promocion);
        console.log(`üîç [PROMOCIONES] "${promocion.title}" (d√≠a: ${promocion.dia || 'todos'}) -> siempre visible`);
      } else {
        // Verificar si coincide con el d√≠a comercial actual
        const diaComercial = currentDayName.toLowerCase();
        const diaPromocion = promocion.dia.toLowerCase();
        
        if (diaComercial === diaPromocion) {
          promocionesVisibles.push(promocion);
          console.log(`üîç [PROMOCIONES] "${promocion.title}" (d√≠a: ${promocion.dia}) -> visible para ${currentDayName}`);
        } else {
          console.log(`üîç [PROMOCIONES] "${promocion.title}" (d√≠a: ${promocion.dia}) -> NO visible (hoy es ${currentDayName})`);
        }
      }
    }
    
    console.log(`‚úÖ [PROMOCIONES] ${promocionesVisibles.length}/${promociones.length} promociones visibles para d√≠a comercial ${currentDayName}`);

    return NextResponse.json({ promociones: promocionesVisibles });
  } catch (error) {
    console.error('Error obteniendo promociones:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}

// POST - Crear nueva promoci√≥n (solo admin)
export async function POST(request: NextRequest) {
  try {
    const businessId = getBusinessIdFromRequest(request);
    
    if (!businessId) {
      return NextResponse.json(
        { error: 'Business ID requerido' },
        { status: 400 }
      );
    }

    const body = await request.json();
    const { title, description, imageUrl, discount, validUntil, orden = 0 } = body;

    if (!title) {
      return NextResponse.json(
        { error: 'T√≠tulo es requerido' },
        { status: 400 }
      );
    }

    const promocion = await prisma.portalPromocion.create({
      data: {
        businessId,
        title,
        description,
        imageUrl,
        discount,
        validUntil: validUntil ? new Date(validUntil) : null,
        orden,
        active: true
      }
    });

    return NextResponse.json({ promocion }, { status: 201 });
  } catch (error) {
    console.error('Error creando promoci√≥n:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}

// PUT - Actualizar promoci√≥n existente (solo admin)
export async function PUT(request: NextRequest) {
  try {
    const businessId = getBusinessIdFromRequest(request);
    
    if (!businessId) {
      return NextResponse.json(
        { error: 'Business ID requerido' },
        { status: 400 }
      );
    }

    const body = await request.json();
    const { id, title, description, imageUrl, discount, validUntil, active, orden } = body;

    if (!id) {
      return NextResponse.json(
        { error: 'ID de la promoci√≥n es requerido' },
        { status: 400 }
      );
    }

    const promocion = await prisma.portalPromocion.update({
      where: {
        id,
        businessId // Verificar que pertenece al business
      },
      data: {
        title,
        description,
        imageUrl,
        discount,
        validUntil: validUntil ? new Date(validUntil) : null,
        active,
        orden
      }
    });

    return NextResponse.json({ promocion });
  } catch (error) {
    console.error('Error actualizando promoci√≥n:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar promoci√≥n (solo admin)
export async function DELETE(request: NextRequest) {
  try {
    const businessId = getBusinessIdFromRequest(request);
    
    if (!businessId) {
      return NextResponse.json(
        { error: 'Business ID requerido' },
        { status: 400 }
      );
    }

    const searchParams = request.nextUrl.searchParams;
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: 'ID de la promoci√≥n es requerido' },
        { status: 400 }
      );
    }

    await prisma.portalPromocion.delete({
      where: {
        id,
        businessId // Verificar que pertenece al business
      }
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error eliminando promoci√≥n:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}
