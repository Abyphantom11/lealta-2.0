'use client';

import { usePathname } from 'next/navigation';
import { useEffect, useState } from 'react';

// Rutas donde NO se debe mostrar el prompt de instalaci√≥n PWA
const EXCLUDED_ROUTES = [
  '/', 
  '/signup',
  '/superadmin',  // Excluir superadmin
];

// Patrones de rutas que tambi√©n deben excluirse (rutas din√°micas)
const EXCLUDED_PATTERNS = [
  /^\/[^/]+\/admin$/,      // /[businessId]/admin
  /^\/[^/]+\/staff$/,      // /[businessId]/staff  
];

// Rutas donde S√ç se debe mostrar el BOT√ìN de instalaci√≥n PWA (m√°s restrictivo)
const BUTTON_ALLOWED_ROUTES = ['/login'];

/**
 * Hook personalizado para determinar si se debe mostrar el prompt PWA
 * basado en la ruta actual
 */
export function usePWAConditional() {
  const pathname = usePathname();
  const [shouldShowPWA, setShouldShowPWA] = useState(false);

  useEffect(() => {
    const isExcluded = EXCLUDED_ROUTES.includes(pathname) || 
                      EXCLUDED_PATTERNS.some(pattern => pattern.test(pathname));
    setShouldShowPWA(!isExcluded);
    
    // Debug log para desarrollo
    if (process.env.NODE_ENV === 'development') {
      console.log(`üîß PWA Conditional: ${pathname} ‚Üí ${!isExcluded ? 'MOSTRAR' : 'OCULTAR'} PWA`);
    }
  }, [pathname]);

  return shouldShowPWA;
}

/**
 * Funci√≥n para verificar si una ruta espec√≠fica debe mostrar PWA
 * √ötil para uso directo sin hook
 */
export function shouldShowPWAForRoute(pathname: string): boolean {
  return !EXCLUDED_ROUTES.includes(pathname) && 
         !EXCLUDED_PATTERNS.some(pattern => pattern.test(pathname));
}

/**
 * Funci√≥n espec√≠fica para verificar si debe mostrarse el BOT√ìN de instalaci√≥n PWA
 * M√°s restrictivo que el popup - solo en login
 */
export function shouldShowPWAButtonForRoute(pathname: string): boolean {
  return BUTTON_ALLOWED_ROUTES.includes(pathname);
}

/**
 * Funci√≥n para agregar rutas a la lista de exclusi√≥n
 * √ötil para configuraci√≥n din√°mica
 */
export function addExcludedRoute(route: string) {
  if (!EXCLUDED_ROUTES.includes(route)) {
    EXCLUDED_ROUTES.push(route);
  }
}

/**
 * Funci√≥n para obtener las rutas excluidas actuales
 */
export function getExcludedRoutes(): readonly string[] {
  return EXCLUDED_ROUTES as readonly string[];
}
