const axios = require('axios');

async function testAdminUpdate() {
    console.log('üîß Probando actualizaci√≥n desde admin...\n');
    
    try {
        // 1. Verificar estado actual
        console.log('üìä PASO 1: Estado actual en cliente (API v2)');
        const clienteResponse = await axios.get('http://localhost:3001/api/portal/config-v2', {
            params: { businessId: 'cmfqhepmq0000ey4slyms4knv' }
        });
        
        const recompensasAntes = clienteResponse.data.recompensas || [];
        console.log(`üéÅ Recompensas activas antes: ${recompensasAntes.length}`);
        recompensasAntes.forEach(r => {
            console.log(`  - ${r.titulo}: ${r.puntos} pts (activo: ${r.activo})`);
        });
        
        console.log('\nüîÑ PASO 2: Simulando actualizaci√≥n desde admin...');
        
        // 2. Hacer una actualizaci√≥n t√≠pica del admin
        const updateData = {
            businessId: 'cmfqhepmq0000ey4slyms4knv',
            banners: [
                {
                    titulo: 'Banner Test',
                    imagen: 'https://example.com/banner.jpg',
                    activo: true
                }
            ],
            promociones: [
                {
                    titulo: 'Promo Test',
                    descripcion: 'Descripci√≥n de prueba',
                    activo: true
                }
            ],
            recompensas: [
                {
                    titulo: 'werwr',
                    descripcion: 'werwr description',
                    puntos: 203,
                    activo: true
                },
                {
                    titulo: 'dsfsf',
                    descripcion: 'dsfsf description',
                    puntos: 200,
                    activo: false  // ‚ö†Ô∏è CAMBIAMOS ESTO A FALSE PARA PROBAR
                },
                {
                    titulo: 'Nueva Recompensa Test',
                    descripcion: 'Recompensa a√±adida desde admin',
                    puntos: 150,
                    activo: true
                }
            ],
            favoritosDia: [
                {
                    titulo: 'Favorito Test',
                    descripcion: 'Descripci√≥n favorito',
                    activo: true
                }
            ]
        };
        
        // Simulamos el PUT del admin
        console.log('üì§ Enviando actualizaci√≥n via admin API...');
        const adminResponse = await axios.put(
            'http://localhost:3001/api/admin/portal-config',
            updateData,
            {
                headers: {
                    'Content-Type': 'application/json'
                }
            }
        );
        
        console.log(`‚úÖ Admin response: ${adminResponse.status} - ${adminResponse.statusText}`);
        
        // 3. Verificar que el cliente ve los cambios inmediatamente
        console.log('\nüìä PASO 3: Verificando cambios en cliente (API v2)');
        const clienteResponseDespues = await axios.get('http://localhost:3001/api/portal/config-v2', {
            params: { businessId: 'cmfqhepmq0000ey4slyms4knv' }
        });
        
        const recompensasDespues = clienteResponseDespues.data.recompensas || [];
        console.log(`üéÅ Recompensas activas despu√©s: ${recompensasDespues.length}`);
        recompensasDespues.forEach(r => {
            console.log(`  - ${r.titulo}: ${r.puntos} pts (activo: ${r.activo})`);
        });
        
        // 4. An√°lisis de cambios
        console.log('\nüîç AN√ÅLISIS DE CAMBIOS:');
        console.log(`‚Ä¢ dsfsf deber√≠a estar INACTIVA (activo: false)`);
        console.log(`‚Ä¢ Nueva Recompensa Test deber√≠a aparecer`);
        console.log(`‚Ä¢ werwr deber√≠a seguir activa`);
        
        const dsfsf = recompensasDespues.find(r => r.titulo === 'dsfsf');
        const nueva = recompensasDespues.find(r => r.titulo === 'Nueva Recompensa Test');
        const werwr = recompensasDespues.find(r => r.titulo === 'werwr');
        
        console.log('\nüìã RESULTADOS:');
        if (dsfsf && !dsfsf.activo) {
            console.log('‚úÖ dsfsf correctamente desactivada');
        } else {
            console.log('‚ùå dsfsf no se desactiv√≥ correctamente');
        }
        
        if (nueva && nueva.activo) {
            console.log('‚úÖ Nueva recompensa a√±adida correctamente');
        } else {
            console.log('‚ùå Nueva recompensa no aparece');
        }
        
        if (werwr && werwr.activo) {
            console.log('‚úÖ werwr sigue activa como esperado');
        } else {
            console.log('‚ùå werwr cambi√≥ inesperadamente');
        }
        
        console.log('\nüéâ CONCLUSI√ìN:');
        if (dsfsf && !dsfsf.activo && nueva && nueva.activo && werwr && werwr.activo) {
            console.log('‚úÖ √âXITO TOTAL: El admin puede modificar y el cliente ve los cambios inmediatamente!');
            console.log('‚úÖ La sincronizaci√≥n bidireccional funciona perfectamente como el sistema de branding.');
        } else {
            console.log('‚ö†Ô∏è  Hay algunos problemas en la sincronizaci√≥n que necesitan revisi√≥n.');
        }
        
    } catch (error) {
        console.error('‚ùå Error durante la prueba:', error.response?.data || error.message);
    }
}

testAdminUpdate();
