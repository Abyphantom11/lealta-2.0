// Script para encontrar y eliminar la promoci√≥n problem√°tica
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Funci√≥n para procesar una configuraci√≥n individual
async function processConfig(config) {
  console.log(`\nüìÅ Config ID: ${config.id}, BusinessId: ${config.businessId}`);
  
  if (!config.promociones || !Array.isArray(config.promociones)) {
    console.log('   ‚ÑπÔ∏è Sin promociones en esta configuraci√≥n');
    return false;
  }

  console.log(`   üéØ Promociones: ${config.promociones.length}`);
  
  // Mostrar promociones y detectar problem√°tica
  const hasProblematic = config.promociones.some((promo, index) => {
    console.log(`     ${index + 1}. "${promo.titulo}" - ${promo.descripcion}`);
    if (promo.titulo === '2x1 en C√≥cteles') {
      console.log('     ‚ùå ENCONTRADA PROMOCI√ìN PROBLEM√ÅTICA');
      return true;
    }
    return false;
  });

  return hasProblematic ? await cleanPromotions(config) : false;
}

// Funci√≥n para limpiar promociones
async function cleanPromotions(config) {
  const cleanPromos = config.promociones.filter(promo => 
    promo.titulo !== '2x1 en C√≥cteles'
  );

  console.log(`\nüßπ Limpiando promociones... ${config.promociones.length} ‚Üí ${cleanPromos.length}`);
  
  await prisma.portalConfig.update({
    where: { id: config.id },
    data: { promociones: cleanPromos }
  });
  
  console.log('‚úÖ Promoci√≥n eliminada de la base de datos');
  return true;
}

// Funci√≥n para verificaci√≥n final
async function verifyCleanup() {
  console.log('\nüîç Verificaci√≥n final...');
  
  const finalConfigs = await prisma.portalConfig.findMany();
  
  for (const config of finalConfigs) {
    if (config.promociones && Array.isArray(config.promociones)) {
      const hasProblematic = config.promociones.some(promo => 
        promo.titulo === '2x1 en C√≥cteles'
      );
      if (hasProblematic) {
        console.log(`‚ùå Promoci√≥n problem√°tica TODAV√çA EXISTE en config ${config.id}`);
        return false;
      }
    }
  }
  
  console.log('‚úÖ Promoci√≥n "2x1 en C√≥cteles" completamente eliminada');
  return true;
}

async function findAndCleanPromo() {
  try {
    console.log('üîç Buscando promoci√≥n "2x1 en C√≥cteles"...\n');

    const allConfigs = await prisma.portalConfig.findMany();
    console.log(`üìä Configuraciones encontradas: ${allConfigs.length}`);

    // Procesar cada configuraci√≥n
    for (const config of allConfigs) {
      await processConfig(config);
    }

    // Verificar limpieza
    await verifyCleanup();

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

findAndCleanPromo();
