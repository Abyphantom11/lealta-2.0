#!/usr/bin/env node

/**
 * üß™ PRUEBA R√ÅPIDA: VERIFICAR QUE TODO FUNCIONA EN LOCALHOST
 * 
 * Script para confirmar que la soluci√≥n funciona antes de deploy
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';
const BUSINESS_ID = 'cmgf5px5f0000eyy0elci9yds';

async function testLocalhost() {
  console.log('üß™ PRUEBA R√ÅPIDA EN LOCALHOST');
  console.log('='.repeat(45));
  
  try {
    // 1. PROBAR API CONFIG-V2
    console.log('\nüìã 1. PROBANDO API CONFIG-V2');
    console.log('-'.repeat(35));
    
    const configUrl = `${BASE_URL}/api/portal/config-v2?businessId=${BUSINESS_ID}`;
    console.log(`URL: ${configUrl}`);
    
    const response = await fetch(configUrl, {
      headers: {
        'Cache-Control': 'no-cache',
        'x-business-id': BUSINESS_ID
      }
    });
    
    if (!response.ok) {
      console.log(`‚ùå Error: ${response.status} ${response.statusText}`);
      return;
    }
    
    const data = await response.json();
    console.log(`‚úÖ Status: ${response.status}`);
    console.log(`‚úÖ Success: ${data.success}`);
    
    if (data.success && data.data) {
      console.log(`\nüìä CONTENIDO DEVUELTO:`);
      console.log(`   üì¢ Banners: ${data.data.banners?.length || 0}`);
      console.log(`   üéÅ Promociones: ${data.data.promociones?.length || 0}`);
      console.log(`   ‚≠ê Favorito del d√≠a: ${data.data.favoritoDelDia ? 'S√ç' : 'NO'}`);
      
      if (data.data.banners?.length > 0) {
        console.log('\n   üì¢ BANNERS ENCONTRADOS:');
        data.data.banners.forEach((banner, idx) => {
          console.log(`      ${idx + 1}. "${banner.titulo}" | IMG: ${banner.imagenUrl ? '‚úÖ' : '‚ùå'}`);
        });
      }
      
      if (data.data.promociones?.length > 0) {
        console.log('\n   üéÅ PROMOCIONES ENCONTRADAS:');
        data.data.promociones.forEach((promo, idx) => {
          console.log(`      ${idx + 1}. "${promo.titulo}" | IMG: ${promo.imagenUrl ? '‚úÖ' : '‚ùå'}`);
        });
      }
      
      if (data.data.favoritoDelDia) {
        console.log(`\n   ‚≠ê FAVORITO ENCONTRADO:`);
        console.log(`      "${data.data.favoritoDelDia.productName}" | IMG: ${data.data.favoritoDelDia.imageUrl ? '‚úÖ' : '‚ùå'}`);
      }
      
      // 2. VERIFICAR QUE TODOS TIENEN IM√ÅGENES
      console.log('\nüîç 2. VERIFICACI√ìN DE IM√ÅGENES');
      console.log('-'.repeat(35));
      
      const bannersConImagen = data.data.banners?.filter(b => b.imagenUrl) || [];
      const promocionesConImagen = data.data.promociones?.filter(p => p.imagenUrl) || [];
      const favoritoConImagen = data.data.favoritoDelDia?.imageUrl ? 1 : 0;
      
      console.log(`üì¢ Banners con imagen: ${bannersConImagen.length}/${data.data.banners?.length || 0}`);
      console.log(`üéÅ Promociones con imagen: ${promocionesConImagen.length}/${data.data.promociones?.length || 0}`);
      console.log(`‚≠ê Favorito con imagen: ${favoritoConImagen}/1`);
      
      // 3. RESULTADO FINAL
      console.log('\nüéØ 3. RESULTADO FINAL');
      console.log('-'.repeat(25));
      
      const todoTieneImagenes = 
        bannersConImagen.length === (data.data.banners?.length || 0) &&
        promocionesConImagen.length === (data.data.promociones?.length || 0) &&
        (!data.data.favoritoDelDia || data.data.favoritoDelDia.imageUrl);
      
      if (todoTieneImagenes && bannersConImagen.length > 0 && promocionesConImagen.length > 0) {
        console.log('üéâ ¬°√âXITO TOTAL!');
        console.log('‚úÖ Todos los elementos tienen im√°genes v√°lidas');
        console.log('‚úÖ La API devuelve todo correctamente');
        console.log('‚úÖ El portal cliente deber√≠a mostrar todo');
        
        console.log('\nüì± PR√ìXIMOS PASOS:');
        console.log('   1. Verificar en producci√≥n');
        console.log('   2. Si no aparece, revisar cache del navegador');
        console.log('   3. Verificar consola del navegador (F12)');
      } else {
        console.log('‚ö†Ô∏è A√öN HAY PROBLEMAS:');
        if (bannersConImagen.length === 0) console.log('   ‚ùå Faltan banners con imagen');
        if (promocionesConImagen.length === 0) console.log('   ‚ùå Faltan promociones con imagen');
        if (data.data.favoritoDelDia && !data.data.favoritoDelDia.imageUrl) console.log('   ‚ùå Favorito sin imagen');
      }
      
    } else {
      console.log('‚ùå API no devolvi√≥ datos v√°lidos');
      console.log('Respuesta:', JSON.stringify(data, null, 2));
    }
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° SOLUCI√ìN:');
      console.log('   1. Aseg√∫rate de que el servidor local est√© ejecut√°ndose');
      console.log('   2. Ejecuta: npm run dev');
      console.log('   3. Espera a que est√© listo en http://localhost:3001');
    }
  }
}

testLocalhost().catch(console.error);
